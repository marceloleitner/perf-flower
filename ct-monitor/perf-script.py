# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-script-python Documentation for the list of available functions.

from __future__ import print_function

import os
import sys

sys.path.append(os.environ['PERF_EXEC_PATH'] + \
    '/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

from perf_trace_context import *
from Core import *

# Each offload request
# The inner hash has key = offload addr, value = [ timestamp1, timestamp2, .. ]
requests = {'add': {},
            'del': {},
            'stats': {}
            }
events = []


def trace_begin():
    print("in trace_begin")

def trace_end():
    print("in trace_end")
    #for (event, offload, ts_req, ts_exec) in events:
    #    print("%s(%x, %s, %s, %s)" % (event, offload, ts_req, ts_exec, ts_exec - ts_req))

    fp = open('events.dat', 'w')
    hits = {'add': 0, 'del': 0, 'stats': 0}
    fp.write('#exec tstamp\tadd\tdel\tstats\n')
    for (event, offload, ts_req, ts_exec) in events:
       hits[event] += 1
       fp.write("%f\t%d\t%d\t%d\n" % (ts_exec, *hits.values()))
    fp.close()

    fp = open('events-latency-add.dat', 'w')
    fp.write('#exec tstamp\tlatency\n')
    fp2 = open('events-latency-del.dat', 'w')
    fp2.write('#exec tstamp\tlatency\n')
    fp3 = open('events-latency-stats.dat', 'w')
    fp3.write('#exec tstamp\tlatency\n')
    for (event, offload, ts_req, ts_exec) in events:
        if event == 'add':
            fp.write("%f\t%f\n" % (ts_exec, ts_exec - ts_req))
        elif event == 'del':
            fp2.write("%f\t%f\n" % (ts_exec, ts_exec - ts_req))
        elif event == 'stats':
            fp3.write("%f\t%f\n" % (ts_exec, ts_exec - ts_req))
    fp.close()
    fp2.close()
    fp3.close()

    events.sort(key=lambda x: x[2])
    fp = open('events-req.dat', 'w')
    hits = {'add': 0, 'del': 0, 'stats': 0}
    fp.write('#req tstamp\tadd\tdel\tstats\n')
    for (event, offload, ts_req, ts_exec) in events:
       hits[event] += 1
       fp.write("%f\t%d\t%d\t%d\n" % (ts_req, *hits.values()))
    fp.close()


def build_ns(sec, nsec):
    return sec + nsec / 1000000000.0

def add_request(event, offload, sec, nsec):
    requests[event][offload] = build_ns(sec, nsec)

def add_event(event, offload, sec, nsec):
    if not offload in requests[event].keys():
        print("failed to match %s(%x)" % (event, offload))
        return

    ts = build_ns(sec, nsec)
    events.append((event, offload, requests[event][offload], ts))
    del requests[event][offload]


def probe__nf_flow_offload_add_L6(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_ip, offload, perf_sample_dict):
    add_request('add', offload, common_secs, common_nsecs)


def probe__nf_flow_offload_del_L6(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_ip, offload, perf_sample_dict):
    add_request('del', offload, common_secs, common_nsecs)


def probe__nf_flow_offload_stats_L11(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_ip, offload, perf_sample_dict):
    add_request('stats', offload, common_secs, common_nsecs)





def probe__flow_offload_work_handler(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_ip, perf_sample_dict):

    return

def probe__flow_offload_work_add(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_ip, offload, perf_sample_dict):
    add_event('add', offload, common_secs, common_nsecs)


def probe__flow_offload_work_del(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_ip, offload, perf_sample_dict):
    add_event('del', offload, common_secs, common_nsecs)


def probe__flow_offload_work_stats(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_ip, offload, perf_sample_dict):
    add_event('stats', offload, common_secs, common_nsecs)


def trace_unhandled(event_name, context, event_fields_dict, perf_sample_dict):
        print(get_dict_as_string(event_fields_dict))
        print('Sample: {'+get_dict_as_string(perf_sample_dict['sample'], ', ')+'}')

def get_dict_as_string(a_dict, delimiter=' '):
    return delimiter.join(['%s=%s'%(k,str(v))for k,v in sorted(a_dict.items())])
